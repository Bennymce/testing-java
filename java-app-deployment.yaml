apiVersion: apps/v1
kind: Deployment
metadata:
  name: testing-java-app-deployment
  namespace: testing
spec:
  replicas: 2
  selector:
    matchLabels:
      app: testing-java-app
  template:
    metadata:
      labels:
        app: testing-java-app
    spec:
      serviceAccountName: jenkins-service-account
      containers:
      - name: testing-java-app
        image: image  # Replace with your actual Docker image
        imagePullPolicy: Always
        ports:
        - containerPort: 8081
        volumeMounts:
        - name: my-volume
          mountPath: /data  # Mount path in the container
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"  # 1 CPU = 1000m (millicores)
        livenessProbe:
          httpGet:
            path: /healthz
            port: 8081
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8081
          initialDelaySeconds: 30
          timeoutSeconds: 10
          periodSeconds: 5
          failureThreshold: 3
      volumes:
      - name: my-volume
        persistentVolumeClaim:
          claimName: testing-pvc  # Reference to your PVC
---
apiVersion: v1
kind: Service
metadata:
  name: testing-java-app-service
  namespace: testing
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-east-2:010438494949:certificate/a30ac5ba-f5ff-413b-a3b9-ffd6e0c23f7c
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
spec:
  type: LoadBalancer
  selector:
    app: testing-java-app
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8081
    - protocol: TCP
      port: 443
      targetPort: 8081
